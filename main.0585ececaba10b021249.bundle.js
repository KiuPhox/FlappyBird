(()=>{"use strict";var t,e,s={d:(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};s.d({},{l:()=>D});class i{constructor(){this.listeners=[]}subscribe(t){this.listeners.push(t)}unsubscribe(t){const e=this.listeners.indexOf(t);-1!==e&&this.listeners.splice(e,1)}invoke(t){for(const e of this.listeners)e(t)}}!function(t){t[t.Ready=0]="Ready",t[t.Playing=1]="Playing",t[t.GameOver=2]="GameOver"}(t||(t={}));class n{constructor(t,e){this._x=t,this._y=e}add(t){return new n(this._x+t._x,this._y+t._y)}sub(t){return new n(this._x-t._x,this._y-t._y)}mul(t){return new n(this._x*t,this._y*t)}static get zero(){return new n(0,0)}static get up(){return new n(0,1)}static get left(){return new n(-1,0)}get x(){return this._x}get y(){return this._y}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}get normalize(){const t=this.magnitude;return 0!==t?new n(this._x/t,this._y/t):n.zero}dot(t){return this._x*t._x+this._y*t._y}}class a{static init(){a.startTime=window.performance.now(),a.lastFrameTime=0}static get time(){return(window.performance.now()-a.startTime)/1e3}static get deltaTime(){return(window.performance.now()-a.lastFrameTime)/1e3}}class r{constructor(t){this.gameObject=t}update(){}}!function(t){t[t.Force=0]="Force",t[t.VelocityChange=1]="VelocityChange"}(e||(e={}));class o extends r{constructor(t,e){super(t),this.name="RigidBody",this.gravityScale=e,this.velocity=n.zero,this.isStatic=!1}addForce(t,s=e.Force){s==e.Force?this.velocity=this.velocity.sub(t):s==e.VelocityChange&&(this.velocity=new n(t.x,-t.y))}update(){this.gravityScale&&(this.velocity=this.velocity.add(new n(0,100*this.gravityScale).mul(a.deltaTime))),this.velocity.magnitude>.1&&(this.gameObject.transform.position=this.gameObject.transform.position.add(this.velocity.mul(100*a.deltaTime)))}}class h{static init(){h._buttons=[]}static add(t){this._buttons.push(t)}static get buttons(){return h._buttons}}class c{static init(t){this.canvas=document.getElementById(t),this.canvas.width=c.size.x,this.canvas.height=c.size.y,this.canvas.addEventListener("click",c.handleClick),c.context=this.canvas.getContext("2d")}static draw(){if(c.context)for(const t of this.sprites){const e=t.gameObject;if(!e.active)continue;const s=this.size.x/2,i=this.size.y/2,n=t.width/2*e.transform.scale,a=t.height/2*e.transform.scale,r=e.transform.position.x+s,o=e.transform.position.y+i;c.context.save(),c.context.translate(r,o),c.context.rotate(e.transform.rotation),t.flipX&&c.context.scale(-1,1),t.flipY&&c.context.scale(1,-1),t.image.complete&&0!==t.image.naturalWidth&&c.context.drawImage(t.image,-n,-a,t.width*e.transform.scale,t.height*e.transform.scale),c.context.restore()}}static registerSprite(t){c.sprites.push(t),c.sprites.sort(((t,e)=>e.order-t.order))}static handleClick(t){const e=new n(t.offsetX-c.size.x/2,t.offsetY-c.size.y/2);for(const t of h.buttons){if(!t.active)return;const s=t.transform.position;e.x>=s.x-t.width/2&&e.x<=s.x+t.width/2&&e.y>=s.y-t.height/2&&e.y<=s.y+t.height/2&&t.onClick()}}}c.size=new n(288,500),c.sprites=[];class d extends r{constructor(t,e){super(t),this._image=new Image,this.order=e,this.name="Sprite",this.flipX=!1,this.flipY=!1,c.registerSprite(this)}setSprite(t){this._image.src=t}get width(){return this._image.width}get height(){return this._image.height}get image(){return this._image}}class p extends r{constructor(t){super(t),this.name="Transform",this._position=n.zero,this.rotation=0,this.scale=1,this.localPosition=n.zero}update(){null!==this.gameObject.parent&&(this.position=this.gameObject.parent.transform.position.add(this.localPosition))}set position(t){this.localPosition=t.sub(this.gameObject.parent?this.gameObject.parent.transform.position:n.zero),this._position=t}get position(){return this._position}}class g{constructor(t){this.parent=null,this.children=[],this.transform=new p(this),this.name=t,this.layer="Default",this.components={},this.isActive=!0,this.addComponent(this.transform),D.registerGameObject(this)}update(){for(const t in this.components)this.active&&this.components[t].update()}addComponent(t){this.components[t.name]=t,"Collider"===t.name&&(t.OnCollisionStay.subscribe(this.OnCollisionStay),t.OnTriggerStay.subscribe(this.OnTriggerStay))}getComponent(t){return this.components[t]}executeStart(){this.start();for(let t=0;t<this.children.length;t++)this.children[t].executeStart()}executeUpdate(){if(this.active){this.update();for(let t=0;t<this.children.length;t++)this.children[t].executeUpdate()}}setChild(t){this.children.includes(t)||(this.children.push(t),t.parent=this)}setParent(t){t.setChild(this)}setActive(t){this.isActive=t,this.active?this.onEnabled:this.onDisabled}get active(){return this.isActive}start(){}onEnabled(){}onDisabled(){}OnCollisionStay(t){}OnTriggerStay(t){}}class l extends g{constructor(){super("Background"),this.sprite=new d(this,3),this.sprite.setSprite("assets/images/background-day.png"),this.addComponent(new o(this,0)),this.addComponent(this.sprite)}}class m{static init(){m.add("Default")}static add(t){u.registerInteractiveLayer(t),this._layers.push(t)}static remove(t){this._layers.splice(this._layers.indexOf(t))}static get layers(){return this._layers}}m._layers=[];class u{static get bounciness(){return.75}static registerCollider(t){u.colliders.push(t)}static registerInteractiveLayer(t){for(const e of m.layers)u.interactiveLayers[e+","+t]=!0,u.interactiveLayers[t+","+e]=!0;u.interactiveLayers[t+","+t]=!0}static setInteractiveLayer(t,e,s){u.interactiveLayers[t+","+e]=s,u.interactiveLayers[e+","+t]=s}static checkInteractiveLayer(t,e){return u.interactiveLayers[t+","+e]}static update(){for(let t=0;t<u.colliders.length-1;t++)for(let e=t+1;e<u.colliders.length;e++)this.checkInteractiveLayer(u.colliders[t].gameObject.layer,u.colliders[e].gameObject.layer)&&this.checkCollider(u.colliders[t],u.colliders[e])&&(u.colliders[t].colliding(u.colliders[e]),u.colliders[e].colliding(u.colliders[t]))}static checkCollider(t,e){const s=t.gameObject.transform.position,i=e.gameObject.transform.position;return s.x+t.size.x/2>=i.x-e.size.x/2&&s.x-t.size.x/2<=i.x+e.size.x/2&&s.y+t.size.y/2>=i.y-e.size.y/2&&s.y-t.size.y/2<=i.y+e.size.y/2}}u.colliders=[],u.interactiveLayers={};class y extends r{constructor(t){super(t),this.OnCollisionStay=new i,this.OnTriggerStay=new i,this.isTrigger=!1,this.name="Collider",u.registerCollider(this)}get size(){const t=this.gameObject.getComponent("Sprite");return new n(t.width,t.height)}update(){super.update()}colliding(t){if(this.isTrigger)this.OnTriggerStay.invoke(t);else{const e=this.gameObject.getComponent("RigidBody");if(!e)return;if(e.isStatic)return;const s=t.gameObject.getComponent("RigidBody"),i=(s?s.velocity:n.zero).sub(e.velocity.mul(u.bounciness));e.velocity=i.magnitude<.005?n.zero:i,this.OnCollisionStay.invoke(t)}}}class w extends g{constructor(){super("Ground"),this.layer="Background";const t=new d(this,1);t.setSprite("assets/images/base.png"),this.addComponent(t),this.addComponent(new y(this));const e=new o(this,0);e.isStatic=!0,this.addComponent(e)}}class f extends g{constructor(){super("BackgroundManager"),this.OnGameStateChanged=e=>{e===t.Ready?(this.backgrounds[0].getComponent("RigidBody").velocity=n.left.mul(.5),this.grounds[0].getComponent("RigidBody").velocity=n.left.mul(1.7)):e===t.GameOver&&(this.backgrounds[0].getComponent("RigidBody").velocity=n.zero,this.grounds[0].getComponent("RigidBody").velocity=n.zero)},this.backgrounds=[new l,new l],this.backgroundSprite=this.backgrounds[0].getComponent("Sprite"),this.grounds=[new w,new w],this.groundSprite=this.grounds[0].getComponent("Sprite"),this.grounds[0].transform.position=new n(0,200),R.OnGameStateChanged.subscribe(this.OnGameStateChanged)}update(){super.update(),this.backgrounds[1].transform.position=new n(this.backgrounds[0].transform.position.x+this.backgroundSprite.width,0),this.backgrounds[0].transform.position.x+this.backgroundSprite.width<=0&&(this.backgrounds[0].transform.position=n.zero),this.grounds[1].transform.position=new n(this.grounds[0].transform.position.x+this.groundSprite.width,this.grounds[0].transform.position.y),this.grounds[0].transform.position.x+this.groundSprite.width<=0&&(this.grounds[0].transform.position=new n(0,200))}}class S{static init(){document.addEventListener("keydown",(t=>this.handleKeyDown(t))),document.addEventListener("keyup",(t=>this.handleKeyUp(t))),document.addEventListener("mousedown",(()=>this.handleMouseDown())),document.addEventListener("mouseup",(()=>this.handleMouseUp())),document.addEventListener("touchstart",(()=>this.handleMouseDown())),document.addEventListener("touchend",(()=>this.handleMouseUp())),this.isHeld=!1}static getKeyDown(t){return this.previousKeyStates.has(t)}static getMouseDown(){return this.isMouseDown}static handleKeyDown(t){const e=t.code;this.isHeld||this.previousKeyStates.has(e)||(this.isHeld=!0,this.previousKeyStates.add(e))}static handleKeyUp(t){const e=t.code;this.isHeld=!1,this.previousKeyStates.has(e)&&(console.log("delete"),this.previousKeyStates.delete(e))}static handleMouseDown(){this.isMouseDown=!0}static handleMouseUp(){this.isMouseDown=!1}static reset(){this.previousKeyStates.clear(),this.isMouseDown=!1}}S.previousKeyStates=new Set;const v="assets/images/bird-mid.png";class b extends g{constructor(){super("Bird"),R.OnGameStateChanged.subscribe((t=>this.OnGameStateChanged(t))),this.jumpForce=4.3,this.rigidBody=new o(this,0),this.sprite=new d(this,1),this.sprite.setSprite(v),this.addComponent(new y(this)),this.addComponent(this.rigidBody),this.addComponent(this.sprite)}update(){if(super.update(),S.getKeyDown("Space")){const e=R.getGameState();e===t.Ready?(this.jump(),R.updateGameState(t.Playing)):e===t.Playing?this.jump():e===t.GameOver&&R.updateGameState(t.Ready)}if(S.getMouseDown()){const e=R.getGameState();e===t.Ready?(this.jump(),R.updateGameState(t.Playing)):e===t.Playing&&this.jump()}this.rotateBaseOnGravity(),this.updateAnimation()}jump(){this.rigidBody.addForce(n.up.mul(this.jumpForce),e.VelocityChange)}rotateBaseOnGravity(){this.transform.rotation=this.rigidBody.velocity.y/5}updateAnimation(){this.rigidBody.velocity.y>.5?this.sprite.setSprite("assets/images/bird-up.png"):this.rigidBody.velocity.y<.5&&this.rigidBody.velocity.y>-1?this.sprite.setSprite(v):this.rigidBody.velocity.y<-1&&this.sprite.setSprite("assets/images/bird-down.png")}OnGameStateChanged(e){switch(e){case t.Ready:this.transform.position=n.zero,this.rigidBody.velocity=n.zero,this.rigidBody.gravityScale=0;break;case t.Playing:this.rigidBody.gravityScale=.15}}OnCollisionStay(e){R.getGameState()!=t.Playing||"Ground"!=e.gameObject.name&&"Pipe"!=e.gameObject.name||R.updateGameState(t.GameOver)}}class C extends g{constructor(){super("Pipe"),this.layer="Background",this.name="Pipe",this.transform.position=n.zero,this.sprite=new d(this,2),this.sprite.setSprite("assets/images/pipe-green.png"),this.addComponent(this.sprite),this.addComponent(new y(this));const t=new o(this,0);t.isStatic=!0,this.addComponent(t),this.isCount=!0}get center(){return new n(this.transform.position.x+this.sprite.width/2,this.transform.position.y+this.sprite.height/2)}setIsCount(t){this.isCount=t}getIsCount(){return this.isCount}}class O{static Random(t,e){return Math.floor(Math.random()*(e-t+1)+t)}}class x{static init(t){this.score=t,this.highScore=0,this.digits=Array.from({length:4},(()=>new g("ScoreDigit"))),this.sprites=[];for(let t=0;t<this.digits.length;t++)this.sprites[t]=new d(this.digits[t],0),this.digits[t].addComponent(this.sprites[t]),this.sprites[t].setSprite("/assets/images/0.png");this.digits[0].transform.position=new n(-10,-200),this.digits[1].transform.position=new n(this.digits[0].transform.position.x+25,this.digits[0].transform.position.y),this.digits[2].transform.position=new n(-5,-160),this.digits[3].transform.position=new n(this.digits[2].transform.position.x+15,this.digits[2].transform.position.y),this.digits[2].transform.scale=.6,this.digits[3].transform.scale=.6}static reset(){this.score=0,this.numberToDigits()}static increaseScore(){this.score++,this.score>this.highScore&&(this.highScore=this.score),this.display()}static display(){this.numberToDigits()}static numberToDigits(){this.sprites[1].setSprite(`assets/images/${this.score%10}.png`),this.sprites[0].setSprite(`assets/images/${Math.floor(this.score/10)}.png`),this.sprites[3].setSprite(`assets/images/${this.highScore%10}.png`),this.sprites[2].setSprite(`assets/images/${Math.floor(this.highScore/10)}.png`)}}class G{constructor(t,e){this.pool=[],this.createObject=t,this.resetObject=e}get(){return this.pool.length>0?this.pool.pop():this.createObject()}release(t){this.resetObject(t),this.pool.push(t)}clear(){this.pool.length=0}}const k=new n(-1.7,0),j=new n(c.size.x/2+50,0);class _ extends g{constructor(){super("Pipe Spawner"),this.OnGameStateChanged=e=>{switch(e){case t.Ready:this.clear(),this.setActive(!1);break;case t.Playing:this.setIsSpawn(!0);break;case t.GameOver:this.setIsSpawn(!1)}},this.spawnBetweenTime=1,this.spawnTimer=this.spawnBetweenTime,this.pipes=[],this.pipePool=new G((()=>{const t=new C;return t.getComponent("RigidBody").velocity=k,this.pipes.push(t),t}),(t=>{t.transform.position=j,t.setActive(!1)})),R.OnGameStateChanged.subscribe(this.OnGameStateChanged)}update(){this.spawnTimer-=a.deltaTime,this.spawnTimer<0&&(this.spawnTimer=this.spawnBetweenTime,this.spawn());for(let t=0;t<this.pipes.length;t++)!this.pipes[t].getIsCount()&&this.pipes[t].transform.position.x<0&&(this.pipes[t].setIsCount(!0),x.increaseScore()),this.pipes[t].active&&this.pipes[t].transform.position.x+50<-c.size.x&&this.pipePool.release(this.pipes[t])}clear(){for(let t=0;t<this.pipes.length;t++)this.pipePool.release(this.pipes[t])}setIsSpawn(t){this.setActive(t);for(const e of this.pipes)e.getComponent("RigidBody").velocity=t?k:n.zero}spawn(){const t=this.pipePool.get();t.setActive(!0),t.setIsCount(!0),t.getComponent("Sprite").flipY=!1,t.transform.position=new n(j.x,O.Random(60,220));const e=this.pipePool.get();e.transform.position=new n(j.x,t.transform.position.y-430),e.setActive(!0),e.setIsCount(!1),e.getComponent("Sprite").flipY=!0}}class B extends g{constructor(){super("TipUI"),this.OnGameStateChanged=e=>{switch(e){case t.Ready:this.setActive(!0);break;case t.Playing:this.setActive(!1)}},this.transform.position=new n(0,60),this.sprite=new d(this,0),this.sprite.setSprite("assets/images/message.png"),this.addComponent(this.sprite),R.OnGameStateChanged.subscribe(this.OnGameStateChanged)}}class z extends g{constructor(){super("GameOverUI"),this.OnGameStateChanged=e=>{switch(e){case t.Ready:this.setActive(!1);break;case t.GameOver:this.setActive(!0)}},this.sprite=new d(this,0),this.sprite.setSprite("assets/images/gameover.png"),this.addComponent(this.sprite),R.OnGameStateChanged.subscribe(this.OnGameStateChanged)}}class T extends g{constructor(t,e){super(t),this.sprite=new d(this,0),this.sprite.setSprite(e),this.addComponent(this.sprite),h.add(this)}get width(){return this.sprite.width*this.transform.scale}get height(){return this.sprite.height*this.transform.scale}}class P extends T{constructor(){super("PlayAgainButton","assets/images/start.png"),this.OnGameStateChanged=e=>{switch(e){case t.Ready:this.setActive(!1);break;case t.GameOver:this.setActive(!0)}},this.transform.position=new n(0,50),this.transform.scale=.35,R.OnGameStateChanged.subscribe(this.OnGameStateChanged)}onClick(){R.updateGameState(t.Ready)}}class R{static init(){m.add("Background"),u.setInteractiveLayer("Background","Background",!1),this.OnGameStateChanged=new i,x.init(0),new b,new f,new _,new B,new z,new P}static updateGameState(e){switch(this.gameState=e,this.gameState){case t.Ready:x.reset();case t.Playing:case t.GameOver:}this.OnGameStateChanged.invoke(this.gameState)}static getGameState(){return this.gameState}}class D{constructor(){S.init(),a.init(),h.init(),c.init("game"),m.init(),R.init(),R.updateGameState(t.Ready),this.loop()}loop(){a.deltaTime>=1/300&&(u.update(),D.update(),c.draw(),S.reset(),a.lastFrameTime=window.performance.now()),window.requestAnimationFrame((()=>{this.loop()}))}static update(){for(let t=0;t<this.gameObjects.length;t++)this.gameObjects[t].executeUpdate()}static registerGameObject(t){D.gameObjects.push(t)}}D.gameObjects=[],new D})();